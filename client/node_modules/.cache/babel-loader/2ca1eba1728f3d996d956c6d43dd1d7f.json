{"ast":null,"code":"var _jsxFileName = \"/Users/vnfreedomboy/Desktop/map-react/src/component/data/data.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectDataCorona } from '../../redux/data/data.selectors';\nimport { useDispatch } from 'react-redux/lib/hooks/useDispatch';\nimport { fetchDataStartAsync } from '../../redux/data/data.actions'; // const useGetCoronoVirusData = () => {\n// \t// get corona data from api\n// \t// transform data\n// \t// get totals\n// \tconst [countries, setCountries] = useState([]);\n// \tuseEffect(() => {\n// \t\t// const fetchFunc = async () => {\n// \t\t// \tconst data = await fetch(\n// \t\t// \t\t'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true'\n// \t\t// \t);\n// \t\t// \tconst countriesData = await data.json();\n// \t\t// \tconst formattedData = countriesData.features\n// \t\t// \t\t.map(f => f.attributes)\n// \t\t// \t\t.map(f => ({\n// \t\t// \t\t\tname: f.Country_Region,\n// \t\t// \t\t\tcoordinates: [f.Lat, f.Long_],\n// \t\t// \t\t\tconfirmed: f.Confirmed,\n// \t\t// \t\t\tdeaths: f.Deaths,\n// \t\t// \t\t\trecovered: f.Recovered\n// \t\t// \t\t}));\n// \t\t// \tconsole.log(formattedData);\n// \t\t// \tsetCountries(formattedData);\n// \t\t// };\n// \t\t// fetchFunc();\n// \t\t// fetch(\n// \t\t// \t'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true'\n// \t\t// )\n// \t\t// \t.then(data => data.json())\n// \t\t// \t.then(data => {\n// \t\t// \t\tconst formattedData = data.features\n// \t\t// \t\t\t.map(f => f.attributes)\n// \t\t// \t\t\t.map(f => ({\n// \t\t// \t\t\t\tname: f.Country_Region,\n// \t\t// \t\t\t\tcoordinates: [f.Lat, f.Long_],\n// \t\t// \t\t\t\tconfirmed: f.Confirmed,\n// \t\t// \t\t\t\tdeaths: f.Deaths,\n// \t\t// \t\t\t\trecovered: f.Recovered\n// \t\t// \t\t\t}));\n// \t\t// \t\tconsole.log(formattedData);\n// \t\t// \t});\n// \t}, []);\n// \treturn [countries, {}];\n// };\n\nconst Data = () => {\n  const dataCorona = useSelector(selectDataCorona);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchDataStartAsync());\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, console.log(dataCorona));\n};\n\nexport default Data;","map":{"version":3,"sources":["/Users/vnfreedomboy/Desktop/map-react/src/component/data/data.js"],"names":["React","useEffect","useState","useSelector","selectDataCorona","useDispatch","fetchDataStartAsync","Data","dataCorona","dispatch","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,WAAT,QAA4B,mCAA5B;AAEA,SAASC,mBAAT,QAAoC,+BAApC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAClB,QAAMC,UAAU,GAAGL,WAAW,CAACC,gBAAD,CAA9B;AACA,QAAMK,QAAQ,GAAGJ,WAAW,EAA5B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACfQ,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACA,GAFQ,CAAT;AAGA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMI,OAAO,CAACC,GAAR,CAAYH,UAAZ,CAAN,CAAP;AACA,CAPD;;AASA,eAAeD,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectDataCorona } from '../../redux/data/data.selectors';\nimport { useDispatch } from 'react-redux/lib/hooks/useDispatch';\n\nimport { fetchDataStartAsync } from '../../redux/data/data.actions';\n\n// const useGetCoronoVirusData = () => {\n// \t// get corona data from api\n// \t// transform data\n// \t// get totals\n// \tconst [countries, setCountries] = useState([]);\n// \tuseEffect(() => {\n// \t\t// const fetchFunc = async () => {\n// \t\t// \tconst data = await fetch(\n// \t\t// \t\t'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true'\n// \t\t// \t);\n// \t\t// \tconst countriesData = await data.json();\n// \t\t// \tconst formattedData = countriesData.features\n// \t\t// \t\t.map(f => f.attributes)\n// \t\t// \t\t.map(f => ({\n// \t\t// \t\t\tname: f.Country_Region,\n// \t\t// \t\t\tcoordinates: [f.Lat, f.Long_],\n// \t\t// \t\t\tconfirmed: f.Confirmed,\n// \t\t// \t\t\tdeaths: f.Deaths,\n// \t\t// \t\t\trecovered: f.Recovered\n// \t\t// \t\t}));\n// \t\t// \tconsole.log(formattedData);\n// \t\t// \tsetCountries(formattedData);\n// \t\t// };\n// \t\t// fetchFunc();\n// \t\t// fetch(\n// \t\t// \t'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true'\n// \t\t// )\n// \t\t// \t.then(data => data.json())\n// \t\t// \t.then(data => {\n// \t\t// \t\tconst formattedData = data.features\n// \t\t// \t\t\t.map(f => f.attributes)\n// \t\t// \t\t\t.map(f => ({\n// \t\t// \t\t\t\tname: f.Country_Region,\n// \t\t// \t\t\t\tcoordinates: [f.Lat, f.Long_],\n// \t\t// \t\t\t\tconfirmed: f.Confirmed,\n// \t\t// \t\t\t\tdeaths: f.Deaths,\n// \t\t// \t\t\t\trecovered: f.Recovered\n// \t\t// \t\t\t}));\n// \t\t// \t\tconsole.log(formattedData);\n// \t\t// \t});\n// \t}, []);\n// \treturn [countries, {}];\n// };\n\nconst Data = () => {\n\tconst dataCorona = useSelector(selectDataCorona);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(fetchDataStartAsync());\n\t});\n\treturn <div>{console.log(dataCorona)}</div>;\n};\n\nexport default Data;\n"]},"metadata":{},"sourceType":"module"}