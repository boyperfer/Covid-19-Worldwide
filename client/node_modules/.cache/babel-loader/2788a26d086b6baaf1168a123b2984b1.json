{"ast":null,"code":"import DataActionTypes from './data.types';\nimport { countriesHarsh } from './data.utils';\nexport const fetchDataStart = () => ({\n  type: DataActionTypes.FETCH_DATA_START\n});\nexport const fetchDataSuccess = data => ({\n  type: DataActionTypes.FETCH_DATA_SUCCESS,\n  payload: data\n});\nexport const fetchDataFailure = err => ({\n  type: DataActionTypes.FETCH_DATA_FAILURE,\n  payload: err\n});\nexport const toggleNumber = country => ({\n  type: DataActionTypes.TOGGLE_NUMBER,\n  payload: country\n});\nexport const fetchDataStartAsync = () => {\n  return async dispatch => {\n    try {\n      await dispatch(fetchDataStart());\n      const countries = await fetch('https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true');\n      const countriesData = await countries.json();\n      const formattedData = await countriesData.features.map(f => f.attributes);\n      console.log(formattedData);\n      const data = await formattedData.map(f => ({\n        name: f.Country_Region,\n        coordinates: [f.Lat, f.Long_],\n        confirmed: f.Confirmed,\n        deaths: f.Deaths,\n        recovered: f.Recovered,\n        onToggleNumber: false,\n        code: countriesHarsh[f.Country_Region.replace(/\\s+/g, '').toLowerCase()]\n      }));\n      console.log(countriesHarsh['Afghanistan']);\n      dispatch(fetchDataSuccess(data));\n    } catch (err) {\n      dispatch(fetchDataFailure(err));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/vnfreedomboy/Desktop/map-react/src/redux/data/data.actions.js"],"names":["DataActionTypes","countriesHarsh","fetchDataStart","type","FETCH_DATA_START","fetchDataSuccess","data","FETCH_DATA_SUCCESS","payload","fetchDataFailure","err","FETCH_DATA_FAILURE","toggleNumber","country","TOGGLE_NUMBER","fetchDataStartAsync","dispatch","countries","fetch","countriesData","json","formattedData","features","map","f","attributes","console","log","name","Country_Region","coordinates","Lat","Long_","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","onToggleNumber","code","replace","toLowerCase"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACpCC,EAAAA,IAAI,EAAEH,eAAe,CAACI;AADc,CAAP,CAAvB;AAIP,OAAO,MAAMC,gBAAgB,GAAGC,IAAI,KAAK;AACxCH,EAAAA,IAAI,EAAEH,eAAe,CAACO,kBADkB;AAExCC,EAAAA,OAAO,EAAEF;AAF+B,CAAL,CAA7B;AAKP,OAAO,MAAMG,gBAAgB,GAAGC,GAAG,KAAK;AACvCP,EAAAA,IAAI,EAAEH,eAAe,CAACW,kBADiB;AAEvCH,EAAAA,OAAO,EAAEE;AAF8B,CAAL,CAA5B;AAKP,OAAO,MAAME,YAAY,GAAGC,OAAO,KAAK;AACvCV,EAAAA,IAAI,EAAEH,eAAe,CAACc,aADiB;AAEvCN,EAAAA,OAAO,EAAEK;AAF8B,CAAL,CAA5B;AAKP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACxC,SAAO,MAAMC,QAAN,IAAkB;AACxB,QAAI;AACH,YAAMA,QAAQ,CAACd,cAAc,EAAf,CAAd;AACA,YAAMe,SAAS,GAAG,MAAMC,KAAK,CAC5B,8RAD4B,CAA7B;AAGA,YAAMC,aAAa,GAAG,MAAMF,SAAS,CAACG,IAAV,EAA5B;AACA,YAAMC,aAAa,GAAG,MAAMF,aAAa,CAACG,QAAd,CAAuBC,GAAvB,CAC3BC,CAAC,IAAIA,CAAC,CAACC,UADoB,CAA5B;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;AACA,YAAMf,IAAI,GAAG,MAAMe,aAAa,CAACE,GAAd,CAAkBC,CAAC,KAAK;AAC1CI,QAAAA,IAAI,EAAEJ,CAAC,CAACK,cADkC;AAE1CC,QAAAA,WAAW,EAAE,CAACN,CAAC,CAACO,GAAH,EAAQP,CAAC,CAACQ,KAAV,CAF6B;AAG1CC,QAAAA,SAAS,EAAET,CAAC,CAACU,SAH6B;AAI1CC,QAAAA,MAAM,EAAEX,CAAC,CAACY,MAJgC;AAK1CC,QAAAA,SAAS,EAAEb,CAAC,CAACc,SAL6B;AAM1CC,QAAAA,cAAc,EAAE,KAN0B;AAO1CC,QAAAA,IAAI,EACHvC,cAAc,CACbuB,CAAC,CAACK,cAAF,CAAiBY,OAAjB,CAAyB,MAAzB,EAAiC,EAAjC,EAAqCC,WAArC,EADa;AAR2B,OAAL,CAAnB,CAAnB;AAYAhB,MAAAA,OAAO,CAACC,GAAR,CAAY1B,cAAc,CAAC,aAAD,CAA1B;AACAe,MAAAA,QAAQ,CAACX,gBAAgB,CAACC,IAAD,CAAjB,CAAR;AACA,KAxBD,CAwBE,OAAOI,GAAP,EAAY;AACbM,MAAAA,QAAQ,CAACP,gBAAgB,CAACC,GAAD,CAAjB,CAAR;AACA;AACD,GA5BD;AA6BA,CA9BM","sourcesContent":["import DataActionTypes from './data.types';\nimport { countriesHarsh } from './data.utils';\n\nexport const fetchDataStart = () => ({\n\ttype: DataActionTypes.FETCH_DATA_START\n});\n\nexport const fetchDataSuccess = data => ({\n\ttype: DataActionTypes.FETCH_DATA_SUCCESS,\n\tpayload: data\n});\n\nexport const fetchDataFailure = err => ({\n\ttype: DataActionTypes.FETCH_DATA_FAILURE,\n\tpayload: err\n});\n\nexport const toggleNumber = country => ({\n\ttype: DataActionTypes.TOGGLE_NUMBER,\n\tpayload: country\n});\n\nexport const fetchDataStartAsync = () => {\n\treturn async dispatch => {\n\t\ttry {\n\t\t\tawait dispatch(fetchDataStart());\n\t\t\tconst countries = await fetch(\n\t\t\t\t'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true'\n\t\t\t);\n\t\t\tconst countriesData = await countries.json();\n\t\t\tconst formattedData = await countriesData.features.map(\n\t\t\t\tf => f.attributes\n\t\t\t);\n\t\t\tconsole.log(formattedData);\n\t\t\tconst data = await formattedData.map(f => ({\n\t\t\t\tname: f.Country_Region,\n\t\t\t\tcoordinates: [f.Lat, f.Long_],\n\t\t\t\tconfirmed: f.Confirmed,\n\t\t\t\tdeaths: f.Deaths,\n\t\t\t\trecovered: f.Recovered,\n\t\t\t\tonToggleNumber: false,\n\t\t\t\tcode:\n\t\t\t\t\tcountriesHarsh[\n\t\t\t\t\t\tf.Country_Region.replace(/\\s+/g, '').toLowerCase()\n\t\t\t\t\t]\n\t\t\t}));\n\t\t\tconsole.log(countriesHarsh['Afghanistan']);\n\t\t\tdispatch(fetchDataSuccess(data));\n\t\t} catch (err) {\n\t\t\tdispatch(fetchDataFailure(err));\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}