{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n\nconst gapicConfig = require(\"./translation_service_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Provides natural language translation operations.\n * @class\n * @memberof v3beta1\n */\n\n\nclass TranslationServiceClient {\n  /**\n   * Construct an instance of TranslationServiceClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    this._descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {}\n    };\n    this._terminated = false; // Ensure that options include the service address and port.\n\n    const staticMembers = this.constructor;\n    const servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    const port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath,\n        port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port;\n    opts.clientConfig = opts.clientConfig || {};\n    const isBrowser = typeof window !== 'undefined';\n\n    if (isBrowser) {\n      opts.fallback = true;\n    } // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n\n\n    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this._pathTemplates = {\n      glossaryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n      locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listGlossaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries')\n    }; // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    const protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const batchTranslateTextResponse = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.BatchTranslateResponse');\n    const batchTranslateTextMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.BatchTranslateMetadata');\n    const createGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.Glossary');\n    const createGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.CreateGlossaryMetadata');\n    const deleteGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.DeleteGlossaryResponse');\n    const deleteGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.DeleteGlossaryMetadata');\n    this._descriptors.longrunning = {\n      batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n      createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n      deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.translation.v3beta1.TranslationService', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.translationServiceStub) {\n      return this.translationServiceStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.translation.v3beta1.TranslationService.\n\n\n    this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.translation.v3beta1.TranslationService') : // tslint:disable-next-line no-any\n    this._protos.google.cloud.translation.v3beta1.TranslationService, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const translationServiceStubMethods = ['translateText', 'detectLanguage', 'getSupportedLanguages', 'batchTranslateText', 'createGlossary', 'listGlossaries', 'getGlossary', 'deleteGlossary'];\n\n    for (const methodName of translationServiceStubMethods) {\n      const innerCallPromise = this.translationServiceStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        return stub[methodName].apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n\n      const apiCall = this._gaxModule.createApiCall(innerCallPromise, this._defaults[methodName], this._descriptors.page[methodName] || this._descriptors.stream[methodName] || this._descriptors.longrunning[methodName]);\n\n      this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n        return apiCall(argument, callOptions, callback);\n      };\n    }\n\n    return this.translationServiceStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-translation'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Translates input text and returns translated text.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string[]} request.contents\n   *   Required. The content of the input in string format.\n   *   We recommend the total content be less than 30k codepoints.\n   *   Use BatchTranslateText for larger text.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {string} [request.sourceLanguageCode]\n   *   Optional. The BCP-47 language code of the input text if\n   *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n   *   listed in Language Support. If the source language isn't specified, the API\n   *   attempts to identify the source language automatically and returns the\n   *   source language within the response.\n   * @param {string} request.targetLanguageCode\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   text, set to one of the language codes listed in Language Support.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-id}` or\n   *   `projects/{project-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-id}/locations/global` or\n   *   `projects/{project-id}`.\n   *\n   *   Non-global location is required for requests using AutoML models or\n   *   custom glossaries.\n   *\n   *   Models and glossaries must be within the same region (have same\n   *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The `model` type requested for this translation.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   For global (non-regionalized) requests, use `location-id` `global`.\n   *   For example,\n   *   `projects/{project-id}/locations/global/models/general/nmt`.\n   *\n   *   If missing, the system decides which google base model to use.\n   * @param {google.cloud.translation.v3beta1.TranslateTextGlossaryConfig} [request.glossaryConfig]\n   *   Optional. Glossary to be applied. The glossary must be\n   *   within the same region (have the same location-id) as the model, otherwise\n   *   an INVALID_ARGUMENT (400) error is returned.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/labels for more information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3beta1.TranslateTextResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  translateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.translateText(request, options, callback);\n  }\n  /**\n   * Detects the language of text within a request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-id}/locations/{location-id}` or\n   *   `projects/{project-id}`.\n   *\n   *   For global calls, use `projects/{project-id}/locations/global` or\n   *   `projects/{project-id}`.\n   *\n   *   Only models within the same region (has same location-id) can be used.\n   *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The language detection model to be used.\n   *\n   *   Format:\n   *   `projects/{project-id}/locations/{location-id}/models/language-detection/{model-id}`\n   *\n   *   Only one language detection model is currently supported:\n   *   `projects/{project-id}/locations/{location-id}/models/language-detection/default`.\n   *\n   *   If not specified, the default model is used.\n   * @param {string} request.content\n   *   The content of the input stored as a string.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {number[]} request.labels\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/labels for more information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3beta1.DetectLanguageResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  detectLanguage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.detectLanguage(request, options, callback);\n  }\n  /**\n   * Returns a list of supported languages for translation.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-id}` or\n   *   `projects/{project-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-id}/locations/global` or\n   *   `projects/{project-id}`.\n   *\n   *   Non-global location is required for AutoML models.\n   *\n   *   Only models within the same region (have same location-id) can be used,\n   *   otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.displayLanguageCode]\n   *   Optional. The language to use to return localized, human readable names\n   *   of supported languages. If missing, then display names are not returned\n   *   in a response.\n   * @param {string} [request.model]\n   *   Optional. Get supported languages of this model.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   Returns languages supported by the specified model.\n   *   If missing, we get supported languages of Google general base (PBMT) model.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3beta1.SupportedLanguages}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getSupportedLanguages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.getSupportedLanguages(request, options, callback);\n  }\n  /**\n   * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to retrieve.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  getGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.getGlossary(request, options, callback);\n  }\n  /**\n   * Translates a large volume of text in asynchronous batch mode.\n   * This function provides real-time output as the inputs are being processed.\n   * If caller cancels a request, the partial results (for an input file, it's\n   * all or nothing) may still be available on the specified output location.\n   *\n   * This call returns immediately and you can\n   * use google.longrunning.Operation.name to poll the status of the call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a call. Must refer to a caller's project.\n   *\n   *   Format: `projects/{project-id}/locations/{location-id}`.\n   *\n   *   The `global` location is not supported for batch translation.\n   *\n   *   Only AutoML Translation models or glossaries within the same region (have\n   *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n   *   error is returned.\n   * @param {string} request.sourceLanguageCode\n   *   Required. Source language code.\n   * @param {string[]} request.targetLanguageCodes\n   *   Required. Specify up to 10 language codes here.\n   * @param {number[]} [request.models]\n   *   Optional. The models to use for translation. Map's key is target language\n   *   code. Map's value is model name. Value can be a built-in general model,\n   *   or an AutoML Translation model.\n   *\n   *   The value format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n   *     `projects/{project-id}/locations/{location-id}/models/general/base`\n   *\n   *\n   *   If the map is empty or a specific model is\n   *   not requested for a language pair, then default google model (nmt) is used.\n   * @param {number[]} request.inputConfigs\n   *   Required. Input configurations.\n   *   The total number of files matched should be <= 1000.\n   *   The total content size should be <= 100M Unicode codepoints.\n   *   The files must use UTF-8 encoding.\n   * @param {google.cloud.translation.v3beta1.OutputConfig} request.outputConfig\n   *   Required. Output configuration.\n   *   If 2 input configs match to the same file (that is, same input path),\n   *   we don't generate output for duplicate inputs.\n   * @param {number[]} [request.glossaries]\n   *   Optional. Glossaries to be applied for translation.\n   *   It's keyed by target language code.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/labels for more information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  batchTranslateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.batchTranslateText(request, options, callback);\n  }\n  /**\n   * Creates a glossary and returns the long-running operation. Returns\n   * NOT_FOUND, if the project doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project name.\n   * @param {google.cloud.translation.v3beta1.Glossary} request.glossary\n   *   Required. The glossary to create.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  createGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.createGlossary(request, options, callback);\n  }\n  /**\n   * Deletes a glossary, or cancels glossary construction\n   * if the glossary isn't created yet.\n   * Returns NOT_FOUND, if the glossary doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to delete.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  deleteGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.deleteGlossary(request, options, callback);\n  }\n  /**\n   * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Filtering is not supported yet, and the parameter currently has no effect.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n   *   The client library support auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Glossary]{@link google.cloud.translation.v3beta1.Glossary} that corresponds to\n   *   the one page received from the API server.\n   *   If the second element is not null it contains the request object of type [ListGlossariesRequest]{@link google.cloud.translation.v3beta1.ListGlossariesRequest}\n   *   that can be used to obtain the next page of the results.\n   *   If it is null, the next page does not exist.\n   *   The third element contains the raw response received from the API server. Its type is\n   *   [ListGlossariesResponse]{@link google.cloud.translation.v3beta1.ListGlossariesResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  listGlossaries(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this._innerApiCalls.listGlossaries(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listGlossaries}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listGlossaries} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Filtering is not supported yet, and the parameter currently has no effect.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary} on 'data' event.\n   */\n\n\n  listGlossariesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this._descriptors.page.listGlossaries.createStream(this._innerApiCalls.listGlossaries, request, callSettings);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified glossary resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} glossary\n   * @returns {string} Resource name string.\n   */\n\n\n  glossaryPath(project, location, glossary) {\n    return this._pathTemplates.glossaryPathTemplate.render({\n      project,\n      location,\n      glossary\n    });\n  }\n  /**\n   * Parse the project from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromGlossaryName(glossaryName) {\n    return this._pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n  }\n  /**\n   * Parse the location from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromGlossaryName(glossaryName) {\n    return this._pathTemplates.glossaryPathTemplate.match(glossaryName).location;\n  }\n  /**\n   * Parse the glossary from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the glossary.\n   */\n\n\n  matchGlossaryFromGlossaryName(glossaryName) {\n    return this._pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;\n  }\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n\n\n  locationPath(project, location) {\n    return this._pathTemplates.locationPathTemplate.render({\n      project,\n      location\n    });\n  }\n  /**\n   * Parse the project from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromLocationName(locationName) {\n    return this._pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the location from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromLocationName(locationName) {\n    return this._pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.translationServiceStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.TranslationServiceClient = TranslationServiceClient;","map":{"version":3,"sources":["/Users/vnfreedomboy/Desktop/map-react/client/node_modules/@google-cloud/translate/build/src/v3beta1/translation_service_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","version","TranslationServiceClient","constructor","opts","_descriptors","page","stream","longrunning","_terminated","staticMembers","servicePath","apiEndpoint","port","clientConfig","isBrowser","window","fallback","_gaxModule","scopes","_gaxGrpc","GrpcClient","_opts","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","_pathTemplates","glossaryPathTemplate","PathTemplate","locationPathTemplate","listGlossaries","PageDescriptor","protoFilesRoot","protobuf","Root","fromJSON","loadSync","operationsClient","lro","grpc","undefined","batchTranslateTextResponse","lookup","batchTranslateTextMetadata","createGlossaryResponse","createGlossaryMetadata","deleteGlossaryResponse","deleteGlossaryMetadata","batchTranslateText","LongrunningDescriptor","decode","bind","createGlossary","deleteGlossary","_defaults","constructSettings","_innerApiCalls","initialize","translationServiceStub","createStub","lookupService","google","cloud","translation","v3beta1","TranslationService","translationServiceStubMethods","methodName","innerCallPromise","then","stub","args","Promise","reject","apply","err","apiCall","createApiCall","argument","callOptions","callback","getProjectId","translateText","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","parent","detectLanguage","getSupportedLanguages","getGlossary","name","listGlossariesStream","callSettings","CallSettings","createStream","glossaryPath","project","location","glossary","render","matchProjectFromGlossaryName","glossaryName","match","matchLocationFromGlossaryName","matchGlossaryFromGlossaryName","locationPath","matchProjectFromLocationName","locationName","matchLocationFromLocationName","close","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./translation_service_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Provides natural language translation operations.\n * @class\n * @memberof v3beta1\n */\nclass TranslationServiceClient {\n    /**\n     * Construct an instance of TranslationServiceClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._descriptors = { page: {}, stream: {}, longrunning: {} };\n        this._terminated = false;\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        opts.clientConfig = opts.clientConfig || {};\n        const isBrowser = typeof window !== 'undefined';\n        if (isBrowser) {\n            opts.fallback = true;\n        }\n        // If we are in browser, we are already using fallback because of the\n        // \"browser\" field in package.json.\n        // But if we were explicitly requested to use fallback, let's do it now.\n        this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this._pathTemplates = {\n            glossaryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this._descriptors.page = {\n            listGlossaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries'),\n        };\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const protoFilesRoot = opts.fallback\n            ? this._gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json'))\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const batchTranslateTextResponse = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.BatchTranslateResponse');\n        const batchTranslateTextMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.BatchTranslateMetadata');\n        const createGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.Glossary');\n        const createGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.CreateGlossaryMetadata');\n        const deleteGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.DeleteGlossaryResponse');\n        const deleteGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3beta1.DeleteGlossaryMetadata');\n        this._descriptors.longrunning = {\n            batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n            createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n            deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.translation.v3beta1.TranslationService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this._innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.translationServiceStub) {\n            return this.translationServiceStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.translation.v3beta1.TranslationService.\n        this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.translation.v3beta1.TranslationService')\n            : // tslint:disable-next-line no-any\n                this._protos.google.cloud.translation.v3beta1\n                    .TranslationService, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const translationServiceStubMethods = [\n            'translateText',\n            'detectLanguage',\n            'getSupportedLanguages',\n            'batchTranslateText',\n            'createGlossary',\n            'listGlossaries',\n            'getGlossary',\n            'deleteGlossary',\n        ];\n        for (const methodName of translationServiceStubMethods) {\n            const innerCallPromise = this.translationServiceStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                return stub[methodName].apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = this._gaxModule.createApiCall(innerCallPromise, this._defaults[methodName], this._descriptors.page[methodName] ||\n                this._descriptors.stream[methodName] ||\n                this._descriptors.longrunning[methodName]);\n            this._innerApiCalls[methodName] = (argument, callOptions, callback) => {\n                return apiCall(argument, callOptions, callback);\n            };\n        }\n        return this.translationServiceStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'translate.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'translate.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloud-translation',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Translates input text and returns translated text.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string[]} request.contents\n     *   Required. The content of the input in string format.\n     *   We recommend the total content be less than 30k codepoints.\n     *   Use BatchTranslateText for larger text.\n     * @param {string} [request.mimeType]\n     *   Optional. The format of the source text, for example, \"text/html\",\n     *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n     * @param {string} [request.sourceLanguageCode]\n     *   Optional. The BCP-47 language code of the input text if\n     *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n     *   listed in Language Support. If the source language isn't specified, the API\n     *   attempts to identify the source language automatically and returns the\n     *   source language within the response.\n     * @param {string} request.targetLanguageCode\n     *   Required. The BCP-47 language code to use for translation of the input\n     *   text, set to one of the language codes listed in Language Support.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-id}` or\n     *   `projects/{project-id}/locations/{location-id}`.\n     *\n     *   For global calls, use `projects/{project-id}/locations/global` or\n     *   `projects/{project-id}`.\n     *\n     *   Non-global location is required for requests using AutoML models or\n     *   custom glossaries.\n     *\n     *   Models and glossaries must be within the same region (have same\n     *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.model]\n     *   Optional. The `model` type requested for this translation.\n     *\n     *   The format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n     *     `projects/{project-id}/locations/{location-id}/models/general/base`\n     *\n     *\n     *   For global (non-regionalized) requests, use `location-id` `global`.\n     *   For example,\n     *   `projects/{project-id}/locations/global/models/general/nmt`.\n     *\n     *   If missing, the system decides which google base model to use.\n     * @param {google.cloud.translation.v3beta1.TranslateTextGlossaryConfig} [request.glossaryConfig]\n     *   Optional. Glossary to be applied. The glossary must be\n     *   within the same region (have the same location-id) as the model, otherwise\n     *   an INVALID_ARGUMENT (400) error is returned.\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/labels for more information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3beta1.TranslateTextResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    translateText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.translateText(request, options, callback);\n    }\n    /**\n     * Detects the language of text within a request.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-id}/locations/{location-id}` or\n     *   `projects/{project-id}`.\n     *\n     *   For global calls, use `projects/{project-id}/locations/global` or\n     *   `projects/{project-id}`.\n     *\n     *   Only models within the same region (has same location-id) can be used.\n     *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.model]\n     *   Optional. The language detection model to be used.\n     *\n     *   Format:\n     *   `projects/{project-id}/locations/{location-id}/models/language-detection/{model-id}`\n     *\n     *   Only one language detection model is currently supported:\n     *   `projects/{project-id}/locations/{location-id}/models/language-detection/default`.\n     *\n     *   If not specified, the default model is used.\n     * @param {string} request.content\n     *   The content of the input stored as a string.\n     * @param {string} [request.mimeType]\n     *   Optional. The format of the source text, for example, \"text/html\",\n     *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n     * @param {number[]} request.labels\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/labels for more information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3beta1.DetectLanguageResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    detectLanguage(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.detectLanguage(request, options, callback);\n    }\n    /**\n     * Returns a list of supported languages for translation.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-id}` or\n     *   `projects/{project-id}/locations/{location-id}`.\n     *\n     *   For global calls, use `projects/{project-id}/locations/global` or\n     *   `projects/{project-id}`.\n     *\n     *   Non-global location is required for AutoML models.\n     *\n     *   Only models within the same region (have same location-id) can be used,\n     *   otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.displayLanguageCode]\n     *   Optional. The language to use to return localized, human readable names\n     *   of supported languages. If missing, then display names are not returned\n     *   in a response.\n     * @param {string} [request.model]\n     *   Optional. Get supported languages of this model.\n     *\n     *   The format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n     *     `projects/{project-id}/locations/{location-id}/models/general/base`\n     *\n     *\n     *   Returns languages supported by the specified model.\n     *   If missing, we get supported languages of Google general base (PBMT) model.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3beta1.SupportedLanguages}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getSupportedLanguages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.getSupportedLanguages(request, options, callback);\n    }\n    /**\n     * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n     * exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the glossary to retrieve.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.getGlossary(request, options, callback);\n    }\n    /**\n     * Translates a large volume of text in asynchronous batch mode.\n     * This function provides real-time output as the inputs are being processed.\n     * If caller cancels a request, the partial results (for an input file, it's\n     * all or nothing) may still be available on the specified output location.\n     *\n     * This call returns immediately and you can\n     * use google.longrunning.Operation.name to poll the status of the call.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Location to make a call. Must refer to a caller's project.\n     *\n     *   Format: `projects/{project-id}/locations/{location-id}`.\n     *\n     *   The `global` location is not supported for batch translation.\n     *\n     *   Only AutoML Translation models or glossaries within the same region (have\n     *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n     *   error is returned.\n     * @param {string} request.sourceLanguageCode\n     *   Required. Source language code.\n     * @param {string[]} request.targetLanguageCodes\n     *   Required. Specify up to 10 language codes here.\n     * @param {number[]} [request.models]\n     *   Optional. The models to use for translation. Map's key is target language\n     *   code. Map's value is model name. Value can be a built-in general model,\n     *   or an AutoML Translation model.\n     *\n     *   The value format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-id}/locations/{location-id}/models/general/nmt`,\n     *     `projects/{project-id}/locations/{location-id}/models/general/base`\n     *\n     *\n     *   If the map is empty or a specific model is\n     *   not requested for a language pair, then default google model (nmt) is used.\n     * @param {number[]} request.inputConfigs\n     *   Required. Input configurations.\n     *   The total number of files matched should be <= 1000.\n     *   The total content size should be <= 100M Unicode codepoints.\n     *   The files must use UTF-8 encoding.\n     * @param {google.cloud.translation.v3beta1.OutputConfig} request.outputConfig\n     *   Required. Output configuration.\n     *   If 2 input configs match to the same file (that is, same input path),\n     *   we don't generate output for duplicate inputs.\n     * @param {number[]} [request.glossaries]\n     *   Optional. Glossaries to be applied for translation.\n     *   It's keyed by target language code.\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/labels for more information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    batchTranslateText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.batchTranslateText(request, options, callback);\n    }\n    /**\n     * Creates a glossary and returns the long-running operation. Returns\n     * NOT_FOUND, if the project doesn't exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project name.\n     * @param {google.cloud.translation.v3beta1.Glossary} request.glossary\n     *   Required. The glossary to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    createGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.createGlossary(request, options, callback);\n    }\n    /**\n     * Deletes a glossary, or cancels glossary construction\n     * if the glossary isn't created yet.\n     * Returns NOT_FOUND, if the glossary doesn't exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the glossary to delete.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    deleteGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.deleteGlossary(request, options, callback);\n    }\n    /**\n     * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n     * exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Filtering is not supported yet, and the parameter currently has no effect.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3beta1.Glossary}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Glossary]{@link google.cloud.translation.v3beta1.Glossary} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListGlossariesRequest]{@link google.cloud.translation.v3beta1.ListGlossariesRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListGlossariesResponse]{@link google.cloud.translation.v3beta1.ListGlossariesResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listGlossaries(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this._innerApiCalls.listGlossaries(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listGlossaries}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listGlossaries} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Filtering is not supported yet, and the parameter currently has no effect.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3beta1.Glossary} on 'data' event.\n     */\n    listGlossariesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this._descriptors.page.listGlossaries.createStream(this._innerApiCalls.listGlossaries, request, callSettings);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified glossary resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} glossary\n     * @returns {string} Resource name string.\n     */\n    glossaryPath(project, location, glossary) {\n        return this._pathTemplates.glossaryPathTemplate.render({\n            project,\n            location,\n            glossary,\n        });\n    }\n    /**\n     * Parse the project from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromGlossaryName(glossaryName) {\n        return this._pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n    }\n    /**\n     * Parse the location from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromGlossaryName(glossaryName) {\n        return this._pathTemplates.glossaryPathTemplate.match(glossaryName)\n            .location;\n    }\n    /**\n     * Parse the glossary from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the glossary.\n     */\n    matchGlossaryFromGlossaryName(glossaryName) {\n        return this._pathTemplates.glossaryPathTemplate.match(glossaryName)\n            .glossary;\n    }\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this._pathTemplates.locationPathTemplate.render({\n            project,\n            location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this._pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this._pathTemplates.locationPathTemplate.match(locationName)\n            .location;\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.translationServiceStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.TranslationServiceClient = TranslationServiceClient;\n//# sourceMappingURL=translation_service_client.js.map"]},"metadata":{},"sourceType":"script"}