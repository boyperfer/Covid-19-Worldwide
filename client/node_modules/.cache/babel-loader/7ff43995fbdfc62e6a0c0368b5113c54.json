{"ast":null,"code":"import DataActionTypes from \"./data.types\";\nimport { codeHarsh, objectHarsh, getDate, sumCases } from \"./data.utils\";\nexport const fetchDataStart = () => ({\n  type: DataActionTypes.FETCH_DATA_START\n});\nexport const fetchDataSuccess = data => ({\n  type: DataActionTypes.FETCH_DATA_SUCCESS,\n  payload: data\n});\nexport const fetchDataFailure = err => ({\n  type: DataActionTypes.FETCH_DATA_FAILURE,\n  payload: err\n});\nexport const changeToObjectHarsh = data => ({\n  type: DataActionTypes.CHANGE_TO_OBJECT_HARSH,\n  payload: objectHarsh(data)\n});\nexport const toggleNumber = country => ({\n  type: DataActionTypes.TOGGLE_NUMBER,\n  payload: country\n});\nexport const sumtotalcases = data => ({\n  type: DataActionTypes.SUM_GLOBAL_CASES,\n  payload: sumCases(data)\n});\nexport const fetchDataStartAsync = () => {\n  return async dispatch => {\n    try {\n      await dispatch(fetchDataStart());\n      const countries = await fetch(\"https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true\");\n      const countriesData = await countries.json();\n      const formattedData = await countriesData.features.map(f => f.attributes);\n      const data = await formattedData.map(f => ({\n        name: f.Country_Region,\n        coordinates: f.Country_Region.toLowerCase() === \"china\" ? [105, 35] : [f.Long_, f.Lat],\n        lastUpdate: getDate(f.Last_Update),\n        confirmed: f.Confirmed,\n        deaths: f.Deaths,\n        recovered: f.Recovered,\n        onToggleNumber: false,\n        code: codeHarsh[f.Country_Region.replace(/\\s+/g, \"\").toLowerCase()]\n      }));\n      dispatch(fetchDataSuccess(data));\n      dispatch(changeToObjectHarsh(data));\n      dispatch(sumtotalcases(data));\n    } catch (err) {\n      dispatch(fetchDataFailure(err));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/tuannguyen/Desktop/zu-han-virus/client/src/redux/data/data.actions.js"],"names":["DataActionTypes","codeHarsh","objectHarsh","getDate","sumCases","fetchDataStart","type","FETCH_DATA_START","fetchDataSuccess","data","FETCH_DATA_SUCCESS","payload","fetchDataFailure","err","FETCH_DATA_FAILURE","changeToObjectHarsh","CHANGE_TO_OBJECT_HARSH","toggleNumber","country","TOGGLE_NUMBER","sumtotalcases","SUM_GLOBAL_CASES","fetchDataStartAsync","dispatch","countries","fetch","countriesData","json","formattedData","features","map","f","attributes","name","Country_Region","coordinates","toLowerCase","Long_","Lat","lastUpdate","Last_Update","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","onToggleNumber","code","replace"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,cAA1D;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACjCC,EAAAA,IAAI,EAAEN,eAAe,CAACO;AADW,CAAP,CAAvB;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,KAAW;AACvCH,EAAAA,IAAI,EAAEN,eAAe,CAACU,kBADiB;AAEvCC,EAAAA,OAAO,EAAEF;AAF8B,CAAX,CAAzB;AAKP,OAAO,MAAMG,gBAAgB,GAAIC,GAAD,KAAU;AACtCP,EAAAA,IAAI,EAAEN,eAAe,CAACc,kBADgB;AAEtCH,EAAAA,OAAO,EAAEE;AAF6B,CAAV,CAAzB;AAKP,OAAO,MAAME,mBAAmB,GAAIN,IAAD,KAAW;AAC1CH,EAAAA,IAAI,EAAEN,eAAe,CAACgB,sBADoB;AAE1CL,EAAAA,OAAO,EAAET,WAAW,CAACO,IAAD;AAFsB,CAAX,CAA5B;AAKP,OAAO,MAAMQ,YAAY,GAAIC,OAAD,KAAc;AACtCZ,EAAAA,IAAI,EAAEN,eAAe,CAACmB,aADgB;AAEtCR,EAAAA,OAAO,EAAEO;AAF6B,CAAd,CAArB;AAKP,OAAO,MAAME,aAAa,GAAIX,IAAD,KAAW;AACpCH,EAAAA,IAAI,EAAEN,eAAe,CAACqB,gBADc;AAEpCV,EAAAA,OAAO,EAAEP,QAAQ,CAACK,IAAD;AAFmB,CAAX,CAAtB;AAKP,OAAO,MAAMa,mBAAmB,GAAG,MAAM;AACrC,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,YAAMA,QAAQ,CAAClB,cAAc,EAAf,CAAd;AACA,YAAMmB,SAAS,GAAG,MAAMC,KAAK,CACzB,8RADyB,CAA7B;AAGA,YAAMC,aAAa,GAAG,MAAMF,SAAS,CAACG,IAAV,EAA5B;AACA,YAAMC,aAAa,GAAG,MAAMF,aAAa,CAACG,QAAd,CAAuBC,GAAvB,CACvBC,CAAD,IAAOA,CAAC,CAACC,UADe,CAA5B;AAGA,YAAMvB,IAAI,GAAG,MAAMmB,aAAa,CAACE,GAAd,CAAmBC,CAAD,KAAQ;AACzCE,QAAAA,IAAI,EAAEF,CAAC,CAACG,cADiC;AAEzCC,QAAAA,WAAW,EACPJ,CAAC,CAACG,cAAF,CAAiBE,WAAjB,OAAmC,OAAnC,GACM,CAAC,GAAD,EAAM,EAAN,CADN,GAEM,CAACL,CAAC,CAACM,KAAH,EAAUN,CAAC,CAACO,GAAZ,CAL+B;AAMzCC,QAAAA,UAAU,EAAEpC,OAAO,CAAC4B,CAAC,CAACS,WAAH,CANsB;AAOzCC,QAAAA,SAAS,EAAEV,CAAC,CAACW,SAP4B;AAQzCC,QAAAA,MAAM,EAAEZ,CAAC,CAACa,MAR+B;AASzCC,QAAAA,SAAS,EAAEd,CAAC,CAACe,SAT4B;AAUzCC,QAAAA,cAAc,EAAE,KAVyB;AAWzCC,QAAAA,IAAI,EACA/C,SAAS,CACL8B,CAAC,CAACG,cAAF,CAAiBe,OAAjB,CAAyB,MAAzB,EAAiC,EAAjC,EAAqCb,WAArC,EADK;AAZ4B,OAAR,CAAlB,CAAnB;AAgBAb,MAAAA,QAAQ,CAACf,gBAAgB,CAACC,IAAD,CAAjB,CAAR;AACAc,MAAAA,QAAQ,CAACR,mBAAmB,CAACN,IAAD,CAApB,CAAR;AACAc,MAAAA,QAAQ,CAACH,aAAa,CAACX,IAAD,CAAd,CAAR;AACH,KA5BD,CA4BE,OAAOI,GAAP,EAAY;AACVU,MAAAA,QAAQ,CAACX,gBAAgB,CAACC,GAAD,CAAjB,CAAR;AACH;AACJ,GAhCD;AAiCH,CAlCM","sourcesContent":["import DataActionTypes from \"./data.types\";\n\nimport { codeHarsh, objectHarsh, getDate, sumCases } from \"./data.utils\";\n\nexport const fetchDataStart = () => ({\n    type: DataActionTypes.FETCH_DATA_START,\n});\n\nexport const fetchDataSuccess = (data) => ({\n    type: DataActionTypes.FETCH_DATA_SUCCESS,\n    payload: data,\n});\n\nexport const fetchDataFailure = (err) => ({\n    type: DataActionTypes.FETCH_DATA_FAILURE,\n    payload: err,\n});\n\nexport const changeToObjectHarsh = (data) => ({\n    type: DataActionTypes.CHANGE_TO_OBJECT_HARSH,\n    payload: objectHarsh(data),\n});\n\nexport const toggleNumber = (country) => ({\n    type: DataActionTypes.TOGGLE_NUMBER,\n    payload: country,\n});\n\nexport const sumtotalcases = (data) => ({\n    type: DataActionTypes.SUM_GLOBAL_CASES,\n    payload: sumCases(data),\n});\n\nexport const fetchDataStartAsync = () => {\n    return async (dispatch) => {\n        try {\n            await dispatch(fetchDataStart());\n            const countries = await fetch(\n                \"https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true\"\n            );\n            const countriesData = await countries.json();\n            const formattedData = await countriesData.features.map(\n                (f) => f.attributes\n            );\n            const data = await formattedData.map((f) => ({\n                name: f.Country_Region,\n                coordinates:\n                    f.Country_Region.toLowerCase() === \"china\"\n                        ? [105, 35]\n                        : [f.Long_, f.Lat],\n                lastUpdate: getDate(f.Last_Update),\n                confirmed: f.Confirmed,\n                deaths: f.Deaths,\n                recovered: f.Recovered,\n                onToggleNumber: false,\n                code:\n                    codeHarsh[\n                        f.Country_Region.replace(/\\s+/g, \"\").toLowerCase()\n                    ],\n            }));\n            dispatch(fetchDataSuccess(data));\n            dispatch(changeToObjectHarsh(data));\n            dispatch(sumtotalcases(data));\n        } catch (err) {\n            dispatch(fetchDataFailure(err));\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}