{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.createDispatchHook = createDispatchHook;\nexports.useDispatch = void 0;\n\nvar _Context = require(\"../components/Context\");\n\nvar _useStore = require(\"./useStore\");\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\n\nfunction createDispatchHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\n\nvar useDispatch = /*#__PURE__*/createDispatchHook();\nexports.useDispatch = useDispatch;","map":{"version":3,"sources":["/Users/vnfreedomboy/Desktop/map-react/node_modules/react-redux/lib/hooks/useDispatch.js"],"names":["exports","__esModule","createDispatchHook","useDispatch","_Context","require","_useStore","context","ReactReduxContext","useStore","createStoreHook","store","dispatch"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;AACAF,OAAO,CAACG,WAAR,GAAsB,KAAK,CAA3B;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;AAEA;;;;;;;;AAMA,SAASH,kBAAT,CAA4BK,OAA5B,EAAqC;AACnC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAGH,QAAQ,CAACI,iBAAnB;AACD;;AAED,MAAIC,QAAQ,GAAGF,OAAO,KAAKH,QAAQ,CAACI,iBAArB,GAAyCF,SAAS,CAACG,QAAnD,GAA8D,CAAC,GAAGH,SAAS,CAACI,eAAd,EAA+BH,OAA/B,CAA7E;AACA,SAAO,SAASJ,WAAT,GAAuB;AAC5B,QAAIQ,KAAK,GAAGF,QAAQ,EAApB;AACA,WAAOE,KAAK,CAACC,QAAb;AACD,GAHD;AAID;AACD;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIT,WAAW,GACf,aACAD,kBAAkB,EAFlB;AAGAF,OAAO,CAACG,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.createDispatchHook = createDispatchHook;\nexports.useDispatch = void 0;\n\nvar _Context = require(\"../components/Context\");\n\nvar _useStore = require(\"./useStore\");\n\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\nfunction createDispatchHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\n\nvar useDispatch =\n/*#__PURE__*/\ncreateDispatchHook();\nexports.useDispatch = useDispatch;"]},"metadata":{},"sourceType":"script"}