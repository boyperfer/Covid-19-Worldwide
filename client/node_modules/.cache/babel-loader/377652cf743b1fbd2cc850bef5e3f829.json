{"ast":null,"code":"import DataActionTypes from './data.types';\nimport { countriesHarsh } from './data.utils';\nexport const fetchDataStart = () => ({\n  type: DataActionTypes.FETCH_DATA_START\n});\nexport const fetchDataSuccess = data => ({\n  type: DataActionTypes.FETCH_DATA_SUCCESS,\n  payload: data\n});\nexport const fetchDataFailure = err => ({\n  type: DataActionTypes.FETCH_DATA_FAILURE,\n  payload: err\n});\nexport const toggleNumber = country => ({\n  type: DataActionTypes.TOGGLE_NUMBER,\n  payload: country\n});\nexport const fetchDataStartAsync = () => {\n  return async dispatch => {\n    try {\n      await dispatch(fetchDataStart());\n      const countries = await fetch('https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true');\n      const countriesData = await countries.json();\n      console.log(countriesData);\n      const formattedData = await countriesData.features.map(f => f.attributes);\n      const data = await formattedData.map(f => ({\n        name: f.Country_Region,\n        coordinates: f.Country_Region.toLowerCase() === 'china' ? [105, 35] : [f.Long_, f.Lat],\n        // lastUpdate: f.Last_Update,\n        confirmed: f.Confirmed,\n        deaths: f.Deaths,\n        recovered: f.Recovered,\n        onToggleNumber: false,\n        code: countriesHarsh[f.Country_Region.replace(/\\s+/g, '').toLowerCase()]\n      }));\n      dispatch(fetchDataSuccess(data));\n    } catch (err) {\n      dispatch(fetchDataFailure(err));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/vnfreedomboy/Desktop/map-react/src/redux/data/data.actions.js"],"names":["DataActionTypes","countriesHarsh","fetchDataStart","type","FETCH_DATA_START","fetchDataSuccess","data","FETCH_DATA_SUCCESS","payload","fetchDataFailure","err","FETCH_DATA_FAILURE","toggleNumber","country","TOGGLE_NUMBER","fetchDataStartAsync","dispatch","countries","fetch","countriesData","json","console","log","formattedData","features","map","f","attributes","name","Country_Region","coordinates","toLowerCase","Long_","Lat","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","onToggleNumber","code","replace"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACpCC,EAAAA,IAAI,EAAEH,eAAe,CAACI;AADc,CAAP,CAAvB;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,KAAW;AAC1CH,EAAAA,IAAI,EAAEH,eAAe,CAACO,kBADoB;AAE1CC,EAAAA,OAAO,EAAEF;AAFiC,CAAX,CAAzB;AAKP,OAAO,MAAMG,gBAAgB,GAAIC,GAAD,KAAU;AACzCP,EAAAA,IAAI,EAAEH,eAAe,CAACW,kBADmB;AAEzCH,EAAAA,OAAO,EAAEE;AAFgC,CAAV,CAAzB;AAKP,OAAO,MAAME,YAAY,GAAIC,OAAD,KAAc;AACzCV,EAAAA,IAAI,EAAEH,eAAe,CAACc,aADmB;AAEzCN,EAAAA,OAAO,EAAEK;AAFgC,CAAd,CAArB;AAKP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACxC,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAMA,QAAQ,CAACd,cAAc,EAAf,CAAd;AACA,YAAMe,SAAS,GAAG,MAAMC,KAAK,CAC5B,8RAD4B,CAA7B;AAGA,YAAMC,aAAa,GAAG,MAAMF,SAAS,CAACG,IAAV,EAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACA,YAAMI,aAAa,GAAG,MAAMJ,aAAa,CAACK,QAAd,CAAuBC,GAAvB,CAC1BC,CAAD,IAAOA,CAAC,CAACC,UADkB,CAA5B;AAGA,YAAMrB,IAAI,GAAG,MAAMiB,aAAa,CAACE,GAAd,CAAmBC,CAAD,KAAQ;AAC5CE,QAAAA,IAAI,EAAEF,CAAC,CAACG,cADoC;AAE5CC,QAAAA,WAAW,EACVJ,CAAC,CAACG,cAAF,CAAiBE,WAAjB,OAAmC,OAAnC,GACG,CAAC,GAAD,EAAM,EAAN,CADH,GAEG,CAACL,CAAC,CAACM,KAAH,EAAUN,CAAC,CAACO,GAAZ,CALwC;AAM5C;AACAC,QAAAA,SAAS,EAAER,CAAC,CAACS,SAP+B;AAQ5CC,QAAAA,MAAM,EAAEV,CAAC,CAACW,MARkC;AAS5CC,QAAAA,SAAS,EAAEZ,CAAC,CAACa,SAT+B;AAU5CC,QAAAA,cAAc,EAAE,KAV4B;AAW5CC,QAAAA,IAAI,EACHxC,cAAc,CACbyB,CAAC,CAACG,cAAF,CAAiBa,OAAjB,CAAyB,MAAzB,EAAiC,EAAjC,EAAqCX,WAArC,EADa;AAZ6B,OAAR,CAAlB,CAAnB;AAgBAf,MAAAA,QAAQ,CAACX,gBAAgB,CAACC,IAAD,CAAjB,CAAR;AACA,KA3BD,CA2BE,OAAOI,GAAP,EAAY;AACbM,MAAAA,QAAQ,CAACP,gBAAgB,CAACC,GAAD,CAAjB,CAAR;AACA;AACD,GA/BD;AAgCA,CAjCM","sourcesContent":["import DataActionTypes from './data.types';\n\nimport { countriesHarsh } from './data.utils';\n\nexport const fetchDataStart = () => ({\n\ttype: DataActionTypes.FETCH_DATA_START,\n});\n\nexport const fetchDataSuccess = (data) => ({\n\ttype: DataActionTypes.FETCH_DATA_SUCCESS,\n\tpayload: data,\n});\n\nexport const fetchDataFailure = (err) => ({\n\ttype: DataActionTypes.FETCH_DATA_FAILURE,\n\tpayload: err,\n});\n\nexport const toggleNumber = (country) => ({\n\ttype: DataActionTypes.TOGGLE_NUMBER,\n\tpayload: country,\n});\n\nexport const fetchDataStartAsync = () => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tawait dispatch(fetchDataStart());\n\t\t\tconst countries = await fetch(\n\t\t\t\t'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/2/query?f=json&where=Confirmed%20%3E%200&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc&resultOffset=0&resultRecordCount=200&cacheHint=true'\n\t\t\t);\n\t\t\tconst countriesData = await countries.json();\n\t\t\tconsole.log(countriesData);\n\t\t\tconst formattedData = await countriesData.features.map(\n\t\t\t\t(f) => f.attributes\n\t\t\t);\n\t\t\tconst data = await formattedData.map((f) => ({\n\t\t\t\tname: f.Country_Region,\n\t\t\t\tcoordinates:\n\t\t\t\t\tf.Country_Region.toLowerCase() === 'china'\n\t\t\t\t\t\t? [105, 35]\n\t\t\t\t\t\t: [f.Long_, f.Lat],\n\t\t\t\t// lastUpdate: f.Last_Update,\n\t\t\t\tconfirmed: f.Confirmed,\n\t\t\t\tdeaths: f.Deaths,\n\t\t\t\trecovered: f.Recovered,\n\t\t\t\tonToggleNumber: false,\n\t\t\t\tcode:\n\t\t\t\t\tcountriesHarsh[\n\t\t\t\t\t\tf.Country_Region.replace(/\\s+/g, '').toLowerCase()\n\t\t\t\t\t],\n\t\t\t}));\n\t\t\tdispatch(fetchDataSuccess(data));\n\t\t} catch (err) {\n\t\t\tdispatch(fetchDataFailure(err));\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}